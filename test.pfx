$def nil [];

$def true #t;
$def false #f;

$def not:a $if a false true;

$def || a b
	$if = a true
		true
		$if = b true
			true
			false;

$def && a b not:|| not:a not:b;

$def sub: a b + a -b;

$def > a b not:<= a b;
$def < a b && not:= a b <= a b;
$def >= a b not:< a b;

$def \any any;

$def nth_fib:n
	$if = n 0
		1
		$if = n 1
			1
			+ nth_fib:sub: n 1 nth_fib:sub: n 2;

$def is_even:n (
	$def is_even_internal: counter even
		$if = counter 0
			even
			is_even_internal: sub: counter 1 not:even;

	is_even_internal: n true
);

$def range: min max
	$if = min max
		[]
		cons: min range: + min 1 max;

$def map: fn list
	$if = list nil
		nil
		cons: fn:head:list map: fn tail:list;

$def len:list
	$if = list nil
		0
		+ 1 len:tail:list;

$def filter: fn list
	$if = list nil
		nil
		(
			$def hd head:list;

			$if fn:hd
				cons: hd filter: fn tail:list
				filter: fn tail:list
		);

$def flip:fn
	$fn a b fn: b a;

$def ,func
	$fn a [a func:a];

$def . fn_a fn_b $fn x fn_a:fn_b:x;

$def @ fn param
	$fn x fn: param x;

$def apply: fn param
	fn:param;

print:apply:
	. .
		@ map @ map @ flip:sub 30
		@ map @ filter is_even
		@ map @ filter @ flip:(>) 30
	[range: 0 40 range: 0 50 range: 0 60];

print:nth_fib:70;

nil
