$def nil [];

$def true #t;
$def false #f;

$def not:a $if a false true;

$def || a b
	$if = a true
		true
		$if = b true
			true
			false;

$def && a b not:|| not:a not:b;

$def sub: a b + a -b;

$def > a b not:<= a b;
$def < a b && not:= a b <= a b;
$def >= a b not:< a b;

$memdef ^ x exp
	$if = exp 0
		1
		* x ^ x sub: exp 1;

$memdef \any any;

$memdef nth_fib:n
	$if = n 0
		1
		$if = n 1
			1
			+ nth_fib:sub: n 1 nth_fib:sub: n 2;

$def is_even:n
	= 0 % n 2;

$memdef range: min max
	$if = min max
		[]
		cons: min range: + min 1 max;

$memdef map: fn list
	$if = list nil
		nil
		cons: fn:head:list map: fn tail:list;

$memdef len:list
	$if = list nil
		0
		+ 1 len:tail:list;

$memdef filter: fn list
	$if = list nil
		nil
		(
			$def hd head:list;

			$if fn:hd
				cons: hd filter: fn tail:list
				filter: fn tail:list
		);

$memdef flip:fn
	$fn a b fn: b a;

$memdef ,func
	$fn a [a func:a];

$memdef . fn_a fn_b
	$fn x fn_a:fn_b:x;

$memdef @ fn param
	$fn x fn: param x;

$memdef apply: fn param
	fn:param;

$def do_print:a
	print:a;

$memdef !! i list
	$if = i 0
		head:list
		!! sub: i 1 tail:list;

map:
	(
		$fn a
			[
				head:a
				map: nth_fib filter: is_even !! 1 a
			]
	)
	filter:
		.
			is_even
			@ (!!) 0
		map:
			,\@ range 0
			range: 0 10
